---
title: "Validation with mortality rates in NFI"
author: "Juliette Archambeau"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    toc: true
    toc-depth: 4
    code-fold: true
    page-layout: full
embed-resources: true
bibliography: references.bib
editor_options: 
  chunk_output_type: console
---

<style type="text/css">
body {
   font-size: 15px;
}
code.r{
  font-size: 11px;
}
pre {
  font-size: 11px
}

table {
  font-size: 10px
}
</style>

```{r setup, include=FALSE}
knitr::opts_chunk$set(fig.width = 5,fig.height = 4,cache=F)
options(width = 300)
library(knitr)      # CRAN v1.26
library(tidyverse)  # CRAN v1.3.0
library(readxl)     # CRAN v1.3.1
library(xtable)
library(reshape2)
library(kableExtra)
library(here)
library(rstan)
library(tidybayes)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
library(parallel)
library(geodist)
library(janitor)
library(latex2exp)
library(magrittr)
library(ggrepel)
library(paletteer)

# my own function for building tables in reports
source(here("scripts/functions/kable_mydf.R"))
source(here("scripts/functions/extract_climatedt_metadata.R")) # extracting meta data of the climatic variables in ClimateDT
```



# Introduction


In this report, we aim to estimate the association between the genomic offset predictions and mortality rates in natural populations, a proxy of the absolute fitness. A positive association between the genomic offset predictions and the mortality rates would suggest that the genomic offset approach captures maladaptation in the face of demographic complexity (i.e., the effects of other processes on spatial variance in allele frequencies, such as expansion history and gene flow) as well as the genetic architecture of climate adaptation (polygenic trait architectures, GÃ—E interactions, nonadditive genetic variance).

For that, we use mortality data from the French and Spanish National Forest Inventories (NFI) harmonized in @changenet2021occurrence. The French data relies on temporary plots sampled between 2005 and 2014 while the Spanish data relies on permanent plots sampled during the second (from 1986 to 1996) and third NFIs (from 1997 to 2008). A tree was recorded as dead if its death was dated at less than 5 years ago in the French NFI or if it was alive in the second inventory but dead in the third one in the Spanish NFI. 

In order to account for the different census intervals between inventories, we modeled the proportion $p_{i}$ of maritime pines that died in the plot $i$ during the census interval with the complementary log-log link and an offset on the logarithm of the census interval $\Delta_{i}$ for the plot $i$, as follows:


\begin{align*}
m_i &\sim \text{Binomial}(N_i,p_i)\\
\text{log}(-\text{log}(1-p_i)) &= \beta_{0,c} +  \beta_{C} C_i + \beta_{GO} GO_i + \text{log}(\Delta_i) \\
\end{align*}


with $N_{i}$ the total number of maritime pines in the plot $i$, $m_{i}$ the number of maritime pines that died during the census interval $\Delta_{i}$ in the plot $i$, $C_{i}$ the basal area of all tree species confounded in the plot $i$ (to account for the competition among trees) and $GO_{i}$ the estimated genomic offset in the plot $i$. We used country-specific intercepts $\beta_{0,c}$ to account for the methodological differences between the French and Spanish inventories that may bias the estimations.

The building and evaluation of the statistical model was done in the report `14_ValidationNFI_ModelComparison.qmd`.



# NFI data


This dataset was harmonized in @changenet2021occurrence.

```{r LoadDataNFI}
nfi_data <- readRDS(here::here("data/NFIdata/NFIrawdata_Changenet2021.rds")) %>% 
  droplevels() %>% 
  as_tibble() %>% 
  dplyr::select(plotcode,
                longitude,
                latitude,
                country,
                yearsbetweensurveys, # number of years between surveys
                surveydate1, # date first survey Spanish NFI
                surveydate, # year of the second survey in the Spanish NFI and the unique survey in the French NFI
                treeNbrJ.M, # number of dead trees in the plot
                treeNbrJ.IMall, # total number of trees in the plot
                BA.ha.plot.1 # basal area of all tree species in the plot
                ) %>% 
  dplyr::rename(nb_years = yearsbetweensurveys,
                nb_dead = treeNbrJ.M,
                nb_tot = treeNbrJ.IMall,
                basal_area = BA.ha.plot.1,
                first_survey = surveydate1,
                second_survey = surveydate) %>% 
  dplyr::mutate(first_survey = case_when(!is.na(first_survey) ~ str_sub(first_survey,1,4) %>% as.numeric()), # keep only the year of the 1st survey
                prop_dead = nb_dead/nb_tot,  # proportion of dead trees
                annual_prop_dead = (nb_dead/nb_tot)/nb_years) # annual proportion of dead trees
```

Variables in the dataset

  - Plot code: `plotcode`
  - Longitude and latitude of the plot: `longitude` and `latitude`.
  - Country in which the plot is: `country` (ES = Spain, FR = France).
  - The number of years between surveys in the Spanish inventory (which is equal to 5 in the French inventory as mortality is estimated in the five years before the survey date): `nb_years`.
  - The dates of the first and second survey in the Spanish inventory: `surveydate1` and `surveydate2`.
  - The year of the second survey in the Spanish inventory and of the unique survey in the French inventory: `surveydate`.
  - The number of dead trees in the plot: `nb_dead`.
  - The total number of trees in the plot: `nb_tot`.
  - The basal area of all tree species in the plot (proxy of the competition among trees): `basal_area`.


`r nrow(nfi_data)` plots in this dataset: `r nfi_data %>% dplyr::filter(country=='FR') %>% nrow()` from the French NFI and `r nfi_data %>% dplyr::filter(country=='ES') %>% nrow()` from the Spanish inventory.


## Filtering
 
How many NAs in each column? 

```{r NumberNANFIrawdata}
nfi_data %>% 
  summarise(across(everything(), ~ sum(is.na(.)))) %>% 
  pivot_longer(everything(), names_to = "Variable", values_to = "Number of NAs") %>% 
  kable_mydf(boldfirstcolumn = T)
```

We extract the plots with missing data for the proportion of dead trees and we look at the first eight plots.

```{r PlotsWithNaForPropDeadTrees}
df_na_prop_dead <- nfi_data %>% 
  dplyr::filter(is.na(prop_dead))
df_na_prop_dead[1:8,]  %>% kable_mydf(boldfirstcolumn = F)
```

No maritime pine was recorded in these eight plots (`nb_dead` = 0 and `nb_tot` = 0). We check that this is the case for the `r nrow(df_na_prop_dead)` plots by looking at the unique values in the columns `nb_dead` and `nb_tot` in the subset of plots with missing data for the proportion of dead trees (the `df_na_prop_dead` dataset).

```{r UniqueValuesPlotsWithNaForPropDeadTrees}
df_na_prop_dead %>% 
  summarise(across(nb_dead:nb_tot, ~ unique(.))) %>% 
  pivot_longer(everything(), names_to = "Variable", values_to = "Unique values") %>% 
  kable_mydf(boldfirstcolumn = T)
```

We remove these `r nrow(df_na_prop_dead)` plots.

```{r RemovePlotsWithNoMaritimePine}
nfi_data <- nfi_data %>% 
  dplyr::filter(!is.na(prop_dead))
```


We check that there are no more plots without maritime pine.

```{r CheckingPlotsWithoutMaritimePine}
nfi_data %>% dplyr::filter(nb_tot==0) %>% nrow()
```

Missing data for basal area:

```{r CheckingMissingDataBasalArea}
nfi_data %>% 
  summarise('Number of NAs for basal area' = sum(is.na(basal_area))) %>% 
  kable_mydf(boldfirstcolumn = F)
```

Since there are not many plots with missing basal area data, we delete them.

```{r RemovingMissingDataBasalArea}
nfi_data <- nfi_data %>% 
  dplyr::filter(!is.na(basal_area))
```

After these filtering steps, there are `r nrow(nfi_data)` plots left.


We save the file for model comparison and we save a copy for the DRYAD repository.

```{r ExportNFIdataForModelComparisonAndDryadRepo}
nfi_data %>% saveRDS(file=here("data/NFIdata/NFIdata_cleaned.rds"))

nfi_data %>% write_csv(here("data/DryadRepo/NFIdata_cleaned.csv"))
```


## Inventory dates

```{r InventoryDates, results="hide", message=F, warning=F}
country_names <- c(`ES` = "SPAIN",`FR` = "FRANCE")

ggplot(nfi_data, aes(x=second_survey, fill=as.factor(country))) + 
  geom_histogram(alpha=0.5, position="identity") + 
  theme_bw()  +
  facet_wrap(~as.factor(country), labeller = as_labeller(country_names)) + 
  labs(y="Count of plots",x="Inventory date") +
  theme(legend.position = "none")

ggplot(nfi_data, aes(x=first_survey)) + 
  geom_histogram(alpha=0.5, position="identity") + 
  theme_bw()

nfi_data %>% 
  ggplot(aes(x=nb_years, fill=country)) + 
  geom_histogram(alpha=0.5, position="identity") + 
  labs(y="Count of plots",x="Number of years between surveys") +
  theme_bw()
```


# Climatic data

## Generating file for ClimateDT

```{r ExportNFIplotsCoordinatesForClimateDT, eval=F}
# NFI plots coordinates
# ---------------------
nfi_climateDT <- nfi_data %>% 
  dplyr::select(plotcode, longitude, latitude) %>% 
  write_csv(here::here("data/nfi_coordinates.csv"))
```

We are going to extract the climatic data between 10 years before the first survey until the date of the second survey. For the French NFI, as there is only one survey, we will extract climatic data for the 15 years before the survey.


```{r RangeExtractionYears}
nfi_data %>%
  group_by(country) %>%
  mutate(min_year = case_when(country=="FR" ~ second_survey-15,
                              country=="ES" ~ first_survey-10)) %>% 
  summarise(min_year=min(min_year),
            max_year=max(second_survey)) %>% 
  kable_mydf()
```

So, we need annual climatic data at the location of the NFI plots for the period 1972-2014.

### Calculate climate for each plot


Once we have the annual climatic data at the location of the NFI plots, we generate two datasets:

  - one with the past climate data of the NFI plots, across the period 1901-1950.
  
  - one with the climatic data across a period specific to each plot, corresponding to:
  
    - The period from **5 years before the first inventory date** to the **second inventory date** for the Spanish NFI.
      
    - The period from **10 years before the inventory date** and the **inventory date** for the French NFI. A tree is considered dead in the French NFI if its death is estimated as less than 5 years before the inventory date. 
        
We included the **5 years preceding the estimated date of tree death**, as the climate of the previous years may have **lag effects** on tree death.


We load the annual climatic data, which corresponds to point estimate at the location of the NFI plots:

```{r LoadClimaticData}
clim <- read_csv(here("data/ClimaticData/NFIplots/ClimateDT_cmip6_GFDL-ESM4_NFIcoordinates_ADJ.csv"), show_col_types = FALSE) %>% 
  dplyr::rename(plotcode=ID,
                longitude=Longitude,
                latitude=Latitude,
                elevation=Elevation,
                year=Year)
```

We calculate the average climatic conditions across the period 1901-1950:

```{r CalcClimRef, warning=F, message=F}
# Function to calculate the average of the climatic variables at the location of the NFI plots
source(here("scripts/functions/calc_avg_clim_var.R"))

clim_ref <- clim %>% calc_avg_clim_var(ref_period = c(1901,1950), id_spatial_points = "plotcode")
```


```{r ComparingWithCoordinatesClimateDT, eval=F}

# !!Coding warning!! 
######################

# The coordinates from ClimateDT are not exactly the same as the original ones. 
# Therefore, merging the climatic data with the original data has to be done with the `plotcode` column 
# and not the latitude and longitude of the populations.

# Comparing original coordinates with the ones from ClimateDT
comp_coord <- clim_ref %>% 
  dplyr::select(plotcode,latitude,longitude) %>% 
  dplyr::rename(latitude_climDT=latitude, longitude_climDT=longitude)
comp_coord <- nfi_data %>% 
  dplyr::select(plotcode,latitude,longitude) %>% 
  inner_join(comp_coord, by="plotcode") %>% 
  mutate(diff_latitude=latitude_climDT - latitude,
         diff_longitude=longitude_climDT - longitude) %>% 
  dplyr::filter(diff_latitude != 0 | diff_longitude != 0)

# There are very very small differences
range(comp_coord$diff_latitude)
range(comp_coord$diff_longitude)
```

```{r TimePeriodsForRasterExtraction, eval=F}

# checking time periods for Maurizio
# ==================================

time_periods <- clim_survey %>% 
  dplyr::select(min_year_clim,second_survey) %>% 
  group_by(min_year_clim,second_survey) %>% 
  summarise(count=n()) 

time_periods %>% 
  print(n=nrow(.)) %>% 
  kable_mydf()

time_periods %>% filter(count <10)

time_periods %>% 
  write_csv(here("data/ClimaticData/NFIplots/NFIplots_TimePeriods.csv"))
```

We then calculate the average climatic conditions across the survey periods specific to each NFI plot:

```{r CalculateMeanClimateDuringSurveyPeriod}
# We calculate the mean climatic values between:
  # - five years before the first inventory date
  # - the second inventory date
clim_survey <- nfi_data %>% 
  mutate(min_year_clim = case_when(country=="FR" ~ second_survey-10,
                                   country=="ES" ~ first_survey-5))

# we calculate the average climatic conditions for each specific period
clim_survey <- clim_survey %>% 
  group_by(min_year_clim,second_survey) %>% 
  group_split() %>% 
  purrr::map(\(x){
  
min_year <- unique(x$min_year_clim)
max_year <- unique(x$second_survey)

clim %>% 
  right_join(x[,"plotcode"],by=c("plotcode")) %>%
  calc_avg_clim_var(ref_period = c(min_year,max_year), id_spatial_points = "plotcode")
  
}) %>% list_rbind() 


# we save in a list the average climatic conditions across the two periods (reference period and period of the NFI surveys)
list(clim_ref = clim_ref,
     clim_survey = clim_survey) %>% 
  saveRDS(here("data/ClimaticData/NFIplots/NFIclimate.rds"))
```
 
We save the averaged climatic data at the locations of the NFI plots in the DRYAD repository:

  - dataset `ClimateDT_NFIPlots_PastClimates.csv` for the averaged climates over the reference period 1901-1950.
  
  - dataset `ClimateDT_NFIPlots_SurveyClimates.csv"` for the averaged climates over the survey periods specific to each plot.
  
  
```{r SaveClimateDataInDryadRepo}
clim_ref %>% write_csv(here("data/DryadRepo/ClimateDT_NFIPlots_PastClimates.csv"))
clim_survey %>% write_csv(here("data/DryadRepo/ClimateDT_NFIPlots_SurveyClimates.csv"))
```

# Climatic space covered

We look at how the 34 sampled populations cover the climatic space of the NFI plots.

```{r PlottingClimaticSpace, fig.width=8, fig.height=8}
# Selected climatic variables
clim_var <- readRDS(here("data/ClimaticData/NamesSelectedVariables.rds"))

# Reference climate of the NFI plots
clim_nfi <- clim_ref %>% 
  dplyr::select(plotcode,contains("ude"),elevation, all_of(clim_var)) %>% 
  dplyr::mutate(subdf="nfi") %>% 
  dplyr::rename(id=plotcode)

# Gene pools of the populations
gps <- readRDS(here("data/GenomicData/MainGenePoolInformation.rds"))[[1]] %>% arrange(pop)

# Reference climate of the populations
clim_pop <- readRDS(here("data/ClimaticData/MaritimePinePops/ClimatePopulationLocationPointEstimates_ReferencePeriods_noADJ.rds"))[[1]]$ref_means %>% 
  dplyr::select(pop,contains("ude"),elevation, all_of(clim_var)) %>% 
  left_join(gps,by="pop") %>% 
  dplyr::rename(id=pop,
                subdf=main_gp_pop) 

# Combining the dataset of the populations and the NFI plots
df<- bind_rows(clim_pop,clim_nfi) %>% 
  mutate(sudf=factor(subdf,levels=c("nfi",unique(clim_pop$subdf))))


# Mean annual temperature vs annual precipitation
# ===============================================
p <- df %>%
  ggplot(aes(x=bio1,y=bio12,label=id)) +
  geom_point(data=df %>% filter(subdf=="nfi"), color="gray85") +
  geom_point(data=df %>% filter(!subdf=="nfi"), aes(color=subdf),size=4) +
  scale_color_manual(values=c("darkorchid3",
                              "gold2",
                              "navyblue",
                              "turquoise2",
                              "orangered3",
                              "green3")) +
  xlab("Mean annual temperature (bio1, Â°C)") +
  ylab("Annual precipitation (bio12, mm)") +
  geom_text_repel(data=df %>% filter(!subdf=="nfi")) +
  theme_bw() +
  theme(legend.title = element_blank(),
        legend.position = c(0.85,0.85),
        axis.title = element_text(size=13))

p %>% ggsave(filename = here("figs/ValidationNFI/ClimaticCoverage_Bio1vsBio12.pdf"),
             device="pdf",
             width = 8,
             height=8)

p


# Precipitation seasonality vs Isothermality	
# ==========================================
p <- df %>%
  ggplot(aes(x=bio15,y=bio3,label=id)) +
  geom_point(data=df %>% filter(subdf=="nfi"), color="gray85") +
  geom_point(data=df %>% filter(!subdf=="nfi"), aes(color=subdf),size=4) +
  scale_color_manual(values=c("darkorchid3",
                              "gold2",
                              "navyblue",
                              "turquoise2",
                              "orangered3",
                              "green3")) +
  xlab("Precipitation seasonality (bio15, coefficient of variation)") +
  ylab("Isothermality (bio3, index)") +
  geom_text_repel(data=df %>% filter(!subdf=="nfi")) +
  theme_bw() +
  theme(legend.title = element_blank(),
        legend.position = c(0.15,0.15),
        axis.title = element_text(size=13))

p %>% ggsave(filename = here("figs/ValidationNFI/ClimaticCoverage_Bio3vsBio15.pdf"),
             device="pdf",
             width = 8,
             height=8)

p


# Temperature seasonality and Summer heat moisture index	
# ======================================================
p <- df %>%
  ggplot(aes(x=bio4,y=SHM,label=id)) +
  geom_point(data=df %>% filter(subdf=="nfi"), color="gray85") +
  geom_point(data=df %>% filter(!subdf=="nfi"), aes(color=subdf),size=4) +
  scale_color_manual(values=c("darkorchid3",
                              "gold2",
                              "navyblue",
                              "turquoise2",
                              "orangered3",
                              "green3")) +
  xlab("Temperature seasonality (bio4, standard deviation Ã—100)") +
  ylab("Summer heat moisture index (SHM, Â°C/mm)") +
  geom_text_repel(data=df %>% filter(!subdf=="nfi")) +
  theme_bw() +
  theme(legend.title = element_blank(),
        legend.position = c(0.15,0.85),
        axis.title = element_text(size=13))

p %>% ggsave(filename = here("figs/ValidationNFI/ClimaticCoverage_Bio4vsSHM.pdf"),
             device="pdf",
             width = 8,
             height=8)

p
```


# Genomic offset predictions

We load the genomic offset predictions estimated from the different GEAs.


```{r LoadGenomicOffsetPredictions}
df <- lapply(c("control","cand"), function(x){

list_snps <- list()

list_snps[[x]]$GDM <- readRDS(file=here("outputs/GDM/go_predictions.rds"))[[x]][["go_nfi"]]
list_snps[[x]]$GF <- readRDS(file=here("outputs/GF/go_predictions.rds"))[[x]][["go_nfi"]]
list_snps[[x]]$RDA <- readRDS(file=here("outputs/RDA/go_predictions.rds"))[[x]][["go_nfi"]]
list_snps[[x]]$LFMM <- readRDS(file=here("outputs/LFMM/go_predictions_snpsets.rds"))[[x]][["go_nfi"]]


list_snps <- list_snps[[x]] %>% 
  bind_rows() %>% 
  mutate(method_input = x,
         plotcode = unique(nfi_data$plotcode))

return(list_snps)
}) %>% 
  bind_rows() %>% 
  pivot_longer(cols=c("GDM","GF","RDA","LFMM"), names_to = "method_type",values_to ="GO") %>% 
  bind_rows(tibble(GO = readRDS(file=here("outputs/LFMM/go_predictions_allsnps.rds"))[["go_nfi"]],
                   method_type = "LFMM",
                   method_input = "all",
                   plotcode = unique(nfi_data$plotcode))) %>% 
  mutate(method = paste0(method_type, " (",method_input," SNPs)"))
```


# The model

Stan code of the model:

```{r CompileMortalityModel, message=F,warning=F}
stancode = stan_model(here("scripts/StanModels/ValidationNFI_m3.stan"))
print(stancode)
```

Running the model for each method (GDM, LFMM, GF and RDA) and each input (all SNPs - only for LFMM-, candidate SNPs and control SNPs):

```{r RunMortalityModels, eval=F}
coefftab <- lapply(unique(df$method), function(method_i){
    
    sub_data <- df %>% 
      filter(method == method_i) %>% 
      inner_join(nfi_data, by="plotcode")
      
# Data in a list for Stan 
    stanlist <- list(N = nrow(sub_data),
                     nb_dead = sub_data$nb_dead,
                     nb_tot=sub_data$nb_tot,
                     GO = (sub_data$GO - mean(sub_data$GO))/sd(sub_data$GO),
                     C = (sub_data$basal_area - mean(sub_data$basal_area))/sd(sub_data$basal_area),
                     nb_country=length(unique(sub_data$country)),
                     country=as.numeric(as.factor(sub_data$country)),
                     log_nb_years=log(sub_data$nb_years))

       

# Running stan model
mod <- sampling(stancode, data = stanlist, iter = 2000, chains = 4, cores = 4,init=0, save_warmup = FALSE)

# Save coefficients
    broom.mixed::tidyMCMC(mod,
                  droppars = NULL,
                  estimate.method = "median", # does not work, the mean is estimated, not the median
                                              # to get the median, robust = TRUE
                  ess = F,
                  rhat = F,
                  conf.int = T,
                  conf.level = 0.95) %>%
    #filter(str_detect(term, c('beta'))) %>%
    dplyr::rename(median=estimate,
                  std_error=std.error,
                  conf_low=conf.low,
                  conf_high=conf.high) %>%
    mutate(method=method_i,
           method_type=unique(sub_data$method_type),
           method_input=unique(sub_data$method_input),
           .before=1)
    
  }) %>% bind_rows()

coefftab %>% saveRDS(file=here("outputs/ValidationNFI/coefftab.rds"))
```


## Plot model coefficients

Below, we plot the 95% credible intervals of:

  - the **$\beta_{GO}$ coefficients**, which stand for the association between mortality rates in NFI plots and the genomic offset predictions (i.e. capturing the potential maladaptation of the populations at the location of the NFI plots).
  
  - the **$\beta_C$ coefficients**, which stands for the association between the tree basal area (all species confounded) in the NFI plots and the mortality rates.


```{r CoeffPlotsHeightModels, fig.height=5, fig.width=5, eval=T, results="hide"}
colors_coeff <- c("#004586FF","#FF7F0FFF","#FFD320FF","#579D1CFF","#7E0021FF","#83CAFFFF","#87D180FF","#FEB5A2FF","#F02720FF")

coefftab <- readRDS(file=here("outputs/ValidationNFI/coefftab.rds"))
  
coeff_match <- list(beta_GO=list("Regression coefficients $\\beta_{GO}$",c(0.77,0.85)),#"$\\beta_{GO}$ estimates",
                    beta_C=list("Regression coefficients $\\beta_C$",c(0.77,0.16)))

p <- lapply(c("beta_GO","beta_C"), function(coeff){
  
p <- coefftab %>% 
  filter(term==coeff) %>% 
  mutate(method_input=case_when(method_input=="all" ~ "All SNPs",
                                method_input=="cand" ~ "Candidate SNPs",
                                method_input=="control" ~ "Control SNPs")) %>% 
  mutate(method_input=factor(method_input, levels=c("All SNPs",
                                                    "Candidate SNPs",
                                                    "Control SNPs"))) %>% 
    ggplot(aes(x = method_type,
               y = median,
               ymin = conf_low, 
               ymax = conf_high,
               color=method_input,
               shape=method_input)) +
  geom_hline(yintercept = 0,color="gray") +
  geom_pointinterval(position = position_dodge(width = .4),point_size=3.5,size=3) +
  ylab(TeX(coeff_match[[coeff]][[1]])) + xlab("") +
  ylim(c(-0.15,0.23)) +
  scale_color_manual(values=colors_coeff) +
  scale_shape_manual(values = c(rep(16,6),rep(17,3))) +
  theme_bw() +
  labs(color="SNP set",shape="SNP set") +
  theme(axis.text.x =  element_text(size=13),
        axis.text.y = element_text(size=13),
        axis.title.y = element_text(size=16),
        axis.title.x = element_text(size=1),
        legend.title=element_text(size=13), 
        legend.box.background = element_rect(colour = "gray", linewidth=0.6),
        strip.text.x = element_text(size = 16),
        strip.background = element_blank(),
        legend.position = coeff_match[[coeff]][[2]],
        legend.text=element_text(size=12),
        panel.grid.minor.x=element_blank(),
        panel.grid.major.x=element_blank()) +
  guides(color=guide_legend(ncol=1),
         shape = guide_legend(override.aes = list(size =2 )))

# save in pdf and png
ggsave(p,file=here(paste0("figs/ValidationNFI/",coeff,"_IntervalPlots.pdf")),
       device="pdf",
       height=5,
       width=5)

return(p)

})

p
```

<span style="color: orange;">Interpretation</span>

As expected, the basal area is positively associated with mortality rates.

**For the four methods (GDM, LFMM, GF and RDA), populations with higher genomic offset based on the candidate SNPs (and all SNPs for LFMM) had higher mortality rates in the NFI plots**. Interestingly, this was not the case with genomic offset predictions based on the control SNPs: for GF and LFMM, populations with higher genomic offset based on the control SNPs also shoed higher mortality rates but for GDM and RDA, populations with higher genomic offset showed lower mortality rates in the NFI plots. This confirms the importance of selecting a set of alleles potentially under selection before using the genomic offset predictions to predict maladaptation in natural populations (or using all SNPs with the LFMM approach). 

We can also note the very high association between mortality rates and the genomic offset predictions based on candidate SNPs and from the GF and GDM methods.


# Session information

```{r SessionInfo}
devtools::session_info()
```


