---
title: "Populatin coordinates, elevation and climatic data"
subtitle: "Checking population information - Extracting climatic data with ClimateDT"
author: "Juliette Archambeau"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    toc: true
    toc-depth: 4
    code-fold: true
    page-layout: full
embed-resources: true
bibliography: references.bib
editor_options: 
  chunk_output_type: console
---

<style type="text/css">
body {
   font-size: 15px;
}
code.r{
  font-size: 11px;
}
pre {
  font-size: 11px
}

table {
  font-size: 10px
}
</style>

```{r setup, include=FALSE}
knitr::opts_chunk$set(cache=F)
options(width = 300)
library(knitr)      # CRAN v1.26
library(kableExtra) # CRAN v1.1.0
library(tidyverse)  # CRAN v1.3.0
library(janitor)
library(purrr)
library(magrittr)
library(here)
library(adespatial) # to calculate the Moran eigen vectors

# my own function for building tables in reports
source(here("scripts/functions/kable_mydf.R"))
```

# Introduction

In this document, we first build a table with updated population coordinates and elevation. The information on maritime pine populations has been gathered by different teams across many years, so we had to merge the different sources of information. We first check that we have the most up to date population information.

We have some information on 116 populations that were sampled within different projects. The different sampling are referred as CLONAPIN, B4ESTnew, CORSICA, FORGENIUS and GENTREE. The populations we use in the present study are the populations sampled within the CLONAPIN sampling (except the SID population, and the ROD population for which there is no genomic information). The entire set of populations is analysed within the PhD project of Adélaïde Theraroz.

Then we use the population coordinates and elevation data to extract their climatic data using the [Climate Downscaling Tool (ClimateDT)](https://www.ibbr.cnr.it/climate-dt/) developed within the framework of the B4EST project. Annual climatic variables are extracted between 1901 and 2098. 


# Population coordinates and elevation

We load the dataset with the coordinates of the 116 populations that Adélaïde uses during its PhD.

```{r AllPopsCoordinates}
pop_coord <- read_csv(here("data/PopulationData/coordinates_pinaster_populations_ade_phd.csv"),show_col_types = FALSE) %>% 
  filter(if_any(everything(), ~ !is.na(.))) %>% # remove NAs rows at the end of the csv file
  dplyr::rename(code = CODE, 
                dataset = Data_set,
                latitude = Latitude, 
                longitude = Longitude) %>% 
  filter(!code == "VAL") %>% # we remove the VAL pop which is duplicated (other name code: VAL-CORSICA)
  mutate(dataset = ifelse(dataset == "B4EST new", "B4ESTnew", as.character(dataset)))

# to check that there are no other duplicated rows
# pop_coord %>% dplyr::select(latitude,longitude) %>% get_dupes()
```

<span style="color: red;">**Warning!**</span> There are two VAL populations in this dataset: VAL-VMQ and VAL-CORSICA. The VAL population that I used during my PhD is referred as VAL-VMQ (and belong to the CLONAPIN dataset). I will change its name.

```{r VALpop}
pop_coord %>% filter(str_detect(code,"VAL")) %>% kable_mydf()
```

We load the dataset with population information that I used during my PhD and we compare the population coordinates from the `coordinates_pinaster_populations_ade_phd.csv` file.

```{r MyClonapinCoordinates}
clonapin_pop_coord_juliette <- read_csv(here("data/PopulationData/coordinates_pinaster_populations_juliette_phd.csv"),
                                        show_col_types = FALSE) %>%
  filter(!is.na(CODE)) %>% # remove NAs rows at the end of the csv file 
  dplyr::select(CODE, LATITUDE, LONGITUDE, ALTITUDE) %>% 
  dplyr::rename(code = CODE, latitude_juliette = LATITUDE, longitude_juliette = LONGITUDE, altitude_juliette = ALTITUDE) %>% 
  mutate(code = ifelse(code == "VAL", "VAL-VMQ", as.character(code))) %>% # rename VAL pop
  mutate(altitude_juliette = ifelse(code == "CAS", 158, altitude_juliette)) %>% 
  left_join(pop_coord, by=c("code")) %>% 
  mutate(diff_longitude = longitude - longitude_juliette,
         diff_latitude = latitude - latitude_juliette)


clonapin_pop_coord_juliette %>% kable_mydf(boldfirstcolumn = T, round_number = 10)
```

The two files (`coordinates_pinaster_populations_juliette_phd.csv` and `coordinates_pinaster_populations_ade_phd.csv`) show small differences in the population coordinates. 

We merge the two datasets using:

  - the coordinates from the file `coordinates_pinaster_populations_juliette_phd.csv` for the CLONAPIN populations (i.e. the population coordinates I used during my PhD). 
  
  - the coordinates from the file `coordinates_pinaster_populations_ade_phd.csv` for the other populations.
  
  
<span style="color: red;">**Warning!**</span>  The SID population (from Sidi-Meskour) is referred as belonging to the CLONAPIN dataset in the file `coordinates_pinaster_populations_ade_phd.csv` but was not included in the populations I used during my PhD (populations in the file `coordinates_pinaster_populations_juliette_phd.csv`). So we attribute to this population the coordinates from the file `coordinates_pinaster_populations_ade_phd.csv`.



```{r MergingWithMyPopulationCoordinates}
pop_coord <- pop_coord %>% 
  left_join(clonapin_pop_coord_juliette %>% dplyr::select(code, contains("juliette")), by="code") %>% 
  mutate(latitude = ifelse(dataset == "CLONAPIN" & !is.na(latitude_juliette), latitude_juliette,latitude),
         longitude = ifelse(dataset == "CLONAPIN" & !is.na(longitude_juliette), longitude_juliette, longitude)) %>% 
  dplyr::select(-longitude_juliette, -latitude_juliette)
```

In this dataset, the coordinates of some populations were not ok (eg the coordinates of the RIO population fall into the Mediterranean sea). Santi sent a new dataset (`coordinates_pinaster_populations_21022023.txt`) with updated coordinates (21/02/2023) and with elevation information (with some missing data for some populations).


```{r NewAllPopsCoordinates}
new_pop_coord <-read.delim(here("data/PopulationData/coordinates_pinaster_populations_21022023.txt")) %>% 
  dplyr::rename(code = CODE, 
                dataset = Data_set,
                latitude_new = Latitude, 
                longitude_new = Longitude,
                altitude_new = Elevation,
                country= Country)


pop_coord <- pop_coord %>% 
  left_join(new_pop_coord, by = c("dataset", "code")) %>% 
  mutate(latitude_diff = latitude - latitude_new,
         longitude_diff = longitude - longitude_new,
         altitude_diff = altitude_juliette - altitude_new)
```

Which populations have new coordinates?

```{r PopWithDifferentCoordinates}
pop_coord %>% filter(latitude_diff != 0 | longitude_diff != 0) %>% 
  dplyr::select(-contains("altitude")) %>% 
  kable_mydf()
```

How many NAs in each column?

```{r ChekingsNbNAs}
pop_coord %>% 
  dplyr::summarise(across(everything(), ~ sum(is.na(.)))) %>% 
  pivot_longer(everything(), names_to = "Variable", values_to = "Number of NAs") %>% 
  kable_mydf() 
```

Looking at altitude differences for the CLONAPIN populations 

```{r AltitudeDifferences}
pop_coord %>% 
  dplyr::select(dataset,code,contains("altitude")) %>% 
  dplyr::filter(dataset=="CLONAPIN") %>% 
  kable_mydf()
```

We keep the new altitude information (those from the file `coordinates_pinaster_populations_21022023.txt`)

```{r KeepingNewAltitudes}
pop_coord <- pop_coord %>% 
  mutate(latitude = latitude_new,
         longitude = longitude_new,
         altitude = case_when(dataset != "CLONAPIN" ~ as.numeric(altitude_new),
                              dataset == "CLONAPIN" & is.na(altitude_new) ~ altitude_juliette, # for the ROD population
                              dataset == "CLONAPIN" & !is.na(altitude_new) ~ as.numeric(altitude_new))) %>% 
  dplyr::select(-contains("ude_"))
```

`r pop_coord %>% summarise(sum(is.na(altitude))) %>% pull()` have missing data for altitude.

```{r MissingDataForAltitude}
pop_coord %>%
  dplyr::filter(is.na(altitude)) %>% 
  kable_mydf()
```

We attribute to these populations the same elevation data as the one of the DEM used by ClimateDT (i.e. Google maps DEM).

```{r AttributeDEEMelevationDataToPopulationsWithMissingDataForAltitude}
pop_coord <- pop_coord %>% 
  mutate(altitude = case_when(code == "CAV" ~ 1259,
                              code == "FPN" ~ 792,
                              code == "TAB" ~ 76,
                              code == "TUS" ~ 84,
                              code == "VCA" ~ 396,
                              code == "ES_PP_58/MAE" ~ 1353,
                              code == "ES_PP_59" ~ 1007,
                              code == "ES_PP_60" ~ 1136,
                              code == "MAUbis/FR-PP-12" ~ 606,
                              TRUE ~ altitude))
```


We visualize and save the dataset. Sent to Santi and Adé the 22/02/2023. 

```{r VizAndSavingAllPopsInfo}
pop_coord %>% 
  dplyr::select(-POP) %>% 
  write_csv(here("data/PopulationData/population_information_pinaster_feb2023.csv"))


pop_coord %>% 
  dplyr::select(-POP) %>% 
  kable_mydf()
```


# Extracting climatic data

## Preparing a file for the extraction

We generate a `csv` file for the extraction with ClimateDT. The format of the input file has to be:

  - `1st Column` **ID** (alphanumeric) unique ID of the location (either a number or a code).

  - `2nd Column` **Latitude** (float) latitude of the location expressed in decimal degrees (dot as decimal separator).

  - `3rd Column` **Longitude** (float) longitude of the location expressed in decimal degrees (dot as decimal separator).

  - `4th Column` **Elevation** (integer) elevation of the location expressed in meters a.s.l.


```{r CsvFileForClimaticExtraction}
# csv file sent to Maurizio Marchi the 22/02/2023
# -----------------------------------------------
pop_coord %>% 
  dplyr::select(code,latitude,longitude,altitude) %>% # rm the column dataset
  write_csv(here("data/ClimaticData/MaritimePinePops/ClimateDTfiles/Preextraction/PopCoordinates_ClimateDT_PreExtractionTab.csv"))
```



## Formatting file after extraction

We load the file sent by Maurizio Marchi with climatic variables extracted at the location of each populations and we format a dataset for the variables of interest for the CLONAPIN populations.

```{r BuildingClimaticDatasetClonapinPopForPresentStudy}
# extracting CLONAPIN population names
# ------------------------------------
clonapin_name_pops <- pop_coord %>% 
  dplyr::filter(dataset=="CLONAPIN") %>% 
  dplyr::filter(!code %in% c("ROD","SID")) %>% # no genomic data for these two populations
  pull(code)
  
# keeping climatic variables of interest for the CLONAPIN populations
# -------------------------------------------------------------------
clim <- read_csv(here("data/ClimaticData/MaritimePinePops/ClimateDTfiles/Extraction/ClimateDT_cmip6_GFDL-ESM4_PopCoordinates_ClimateDT_PreExtractionTab.csv"),
               show_col_types = FALSE) %>% 
  dplyr::select(-contains("prc"), -contains("tmx"), -contains("tmn"), -contains("spi"), -contains("spei")) %>% # remove monthly variables
  dplyr::rename(longitude=Longitude,
                latitude=Latitude,
                elevation=Elevation,
                pop=ID,
                SP=MSP) %>% # replace mean summer precipitation by summer precipitation
  dplyr::filter(pop %in% clonapin_name_pops) %>% # we keep only CLONAPIN pops
  dplyr::mutate(pop= ifelse(pop=="VAL-VMQ", "VAL",pop)) # the VAL-VMQ population is referred as VAL in the present study



# Past climates
# =============

# two reference periods
list_ref_periods <- list(ref_1901_1950 = list(range=c(1901,1950)),
                         ref_1961_1990 = list(range=c(1961,1990)))

generate_past_climate_df <- function(ref_period,clim_df){


  clim_past <- clim_df %>% 
  dplyr::filter(!Year=="2041-2070") %>% # we remove future climatic data (which are not noted as a unique year)
  dplyr::mutate(Year=as.numeric(Year)) %>% # year column as numeric so that we can remove years after a given date
  dplyr::filter(ref_period$range[[1]]<=Year& Year<=ref_period$range[[2]]) %>%  # we keep the years btw 1901 and 1950
  dplyr::select(-Year) %>%
  group_by(pop) # group by population


# mean of the annual climatic values
ref_period$ref_means <- clim_past %>% 
  summarise_all("mean") %>% # take the average of the annual values for the ref period 1901-1950
  bind_cols(dbmem(.[,c("latitude","longitude")]))  # we add the distance-based Moran’s Eigenvector Maps (dbMEMs)
  #write_csv(here::here(paste0("data/DryadRepo/PopulationCoordinatesPastClimateInformation_",ref_period[[1]],"_",ref_period[[2]],".csv")))

# mean and sd of the annual climatic values
ref_period$ref_sdmeans <- clim_past %>% 
  dplyr::select(-contains("ude"), -elevation) %>% 
  group_split() %>% 
  purrr::map(\(x){
    
x_mean <- x %>% summarise_if(is.numeric,"mean") 
x_sd <- x %>% summarise_if(is.numeric,"sd")   

bind_rows(x_mean,x_sd) %>% 
  t() %>% 
  as.data.frame() %>% 
  set_colnames(c("mean_ref","sd_ref")) %>% 
  rownames_to_column("variable") %>% 
  as_tibble()

  }) %>% 
    set_names(unique(clim_past$pop)) %>% 
    list_rbind(names_to="pop") 
  
return(ref_period)


}

lapply(list_ref_periods, function(x) generate_past_climate_df(ref_period = x, clim_df = clim)) %>% 
saveRDS(here("data/ClimaticData/MaritimePinePops/PastClimatePopulationLocations.rds"))
```


```{r}
# Predictions of future climates for the period 2041-2070
# -------------------------------------------------------

# GCM names
gcm_names <- c("GFDL-ESM4","IPSL-CM6A-LR","MPI-ESM1-2-HR","MRI-ESM2-0","UKESM1-0-LL")


lapply(gcm_names, function(x){
  
  read_csv(here(paste0("data/ClimaticData/MaritimePinePops/ClimateDTfiles/Extraction/ClimateDT_cmip6_",x,"_PopCoordinates_ClimateDT_PreExtractionTab.csv")), show_col_types = FALSE) %>% 
  dplyr::select(-contains("prc"), -contains("tmx"), -contains("tmn"), -contains("spi"), -contains("spei")) %>% # remove monthly variables
  dplyr::rename(longitude=Longitude,
                latitude=Latitude,
                elevation=Elevation,
                pop=ID,
                SP=MSP) %>% # replace mean summer precipitation by summer precipitation
  dplyr::filter(pop %in% clonapin_name_pops) %>% # we keep only CLONAPIN pops
  dplyr::mutate(pop= ifelse(pop=="VAL-VMQ", "VAL",pop)) %>% # the VAL-VMQ population is referred as VAL in the present study
  dplyr::filter(Year=="2041-2070") %>% 
  dplyr::select(-Year)
  
}) %>% 
  setNames(gcm_names) %>% 
  saveRDS(here::here("data/ClimaticData/MaritimePinePops/FutureClimatePopulationLocationsPointEstimates.rds"))
```

