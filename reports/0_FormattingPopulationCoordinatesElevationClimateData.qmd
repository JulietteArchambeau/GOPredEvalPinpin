---
title: "Populatin coordinates, elevation and climatic data"
subtitle: "Checking population information - Extracting climatic data with ClimateDT"
author: "Juliette Archambeau"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    toc: true
    toc-depth: 4
    code-fold: true
    page-layout: full
    number-sections: true
embed-resources: true
bibliography: references.bib
editor_options: 
  chunk_output_type: console
---

<style type="text/css">
body {
   font-size: 15px;
}
code.r{
  font-size: 11px;
}
pre {
  font-size: 11px
}

table {
  font-size: 10px
}
</style>

```{r setup, include=FALSE}
knitr::opts_chunk$set(cache=F)
options(width = 300)
library(knitr)
library(kableExtra)
library(tidyverse)
library(janitor)
library(purrr)
library(SPEI)
library(raster)
library(magrittr)
library(here)

# my own function for building tables in reports
source(here("scripts/functions/kable_mydf.R"))
```

# Introduction

The first aim of this report is to check that we have the most up-to-date information on population coordinates and elevation. Indeed, the information on maritime pine populations has been gathered by different teams across many years, so we merge the different sources of information and we check that we have the most up-to-date population information.

116 populations of maritime pine have been sampled across different projects, referred to as CLONAPIN, B4ESTnew, CORSICA, FORGENIUS and GENTREE. The entire set of populations is analysed within the PhD project of Adélaïde Theraroz.

The populations we use in the present study are the populations sampled within the CLONAPIN sampling (except the SID population, and the ROD population for which there is no genomic information). In the DRYAD repository associated with the present paper, we only include information on the CLONAPIN populations.

The second aim of this report is to use the population coordinates and elevation data to extract climatic data at the location of the populations using the [Climate Downscaling Tool (ClimateDT)](https://www.ibbr.cnr.it/climate-dt/) developed within the framework of the B4EST project. Averages of the climatic variables under periods of interest (i.e., the reference periods 1901-1950 and 1961-1990; and the future period 2041-2070).

::: {.callout-note}
## DRYAD repository

Three datasets generated in this report are uploaded in the DRYAD repository: `AnnualClimaticData_FromClimateDT_PopulationLocations.csv` (annual climatic data at the location of the 34 CLONAPIN populations between 1901 and 2021), `AveragedClimaticVariables_ReferencePeriod_PopulationLocations.csv` (averages of the climatic variables over the reference period 1901-1950 at the location of the 34 CLONAPIN populations) and `AveragedClimaticVariables_FuturePeriod_PopulationLocations.csv` (averages of the predicted climatic variables over the period 2041-2070 under the scenario SSP3.7-0 and for five different GCMs at the location of the 34 CLONAPIN populations).
:::



# Population coordinates and elevation

We load the dataset `coordinates_pinaster_populations_ade_phd.csv` with the coordinates of the 116 populations that Adélaïde Theraroz uses during her PhD.

```{r AllPopsCoordinates}
pop_coord <- read_csv(here("data/PopulationData/coordinates_pinaster_populations_ade_phd.csv"),show_col_types = FALSE) %>% 
  filter(if_any(everything(), ~ !is.na(.))) %>% # remove NAs rows at the end of the csv file
  dplyr::rename(code = CODE, 
                dataset = Data_set,
                latitude = Latitude, 
                longitude = Longitude) %>% 
  filter(!code == "VAL") %>% # we remove the VAL pop which is duplicated (other name code: VAL-CORSICA)
  mutate(dataset = ifelse(dataset == "B4EST new", "B4ESTnew", as.character(dataset)))

# to check that there are no other duplicated rows
# pop_coord %>% dplyr::select(latitude,longitude) %>% get_dupes()
```

::: {.callout-warning}
There are two VAL populations in this dataset: VAL-VMQ and VAL-CORSICA. During my PhD, I used the VAL-VMQ population (which belongs to the CLONAPIN dataset). This population is named VAL in the datasets I used during my PhD (e.g., in `coordinates_pinaster_populations_juliette_phd.csv`).
:::

```{r VALpop}
pop_coord %>% filter(str_detect(code,"VAL")) %>% kable_mydf()
```

We load the dataset `coordinates_pinaster_populations_juliette_phd.csv` which contains the population information that I used during my PhD (i.e. CLONAPIN populations). 

In this dataset, the VAL-VMQ population is named VAL, so we rename it VAL-VMQ. 

We then compare the population coordinates from this dataset to the population coordinates from the `coordinates_pinaster_populations_ade_phd.csv` dataset.

```{r MyClonapinCoordinates}
clonapin_pop_coord_juliette <- read_csv(here("data/PopulationData/coordinates_pinaster_populations_juliette_phd.csv"),
                                        show_col_types = FALSE) %>%
  filter(!is.na(CODE)) %>% # remove NAs rows at the end of the csv file 
  dplyr::select(CODE, LATITUDE, LONGITUDE, ALTITUDE) %>% 
  dplyr::rename(code = CODE, latitude_juliette = LATITUDE, longitude_juliette = LONGITUDE, altitude_juliette = ALTITUDE) %>% 
  mutate(code = ifelse(code == "VAL", "VAL-VMQ", as.character(code))) %>% # rename VAL pop
  mutate(altitude_juliette = ifelse(code == "CAS", 158, altitude_juliette)) %>% 
  left_join(pop_coord, by=c("code")) %>% 
  mutate(diff_longitude = longitude - longitude_juliette,
         diff_latitude = latitude - latitude_juliette)

clonapin_pop_coord_juliette %>% kable_mydf(boldfirstcolumn = T, round_number = 10)
```

The two files (`coordinates_pinaster_populations_juliette_phd.csv` and `coordinates_pinaster_populations_ade_phd.csv`) show small differences in the population coordinates. 

We merge the two datasets using:

  - the coordinates from the file `coordinates_pinaster_populations_juliette_phd.csv` for the CLONAPIN populations (i.e. the population coordinates I used during my PhD). 
  
  - the coordinates from the file `coordinates_pinaster_populations_ade_phd.csv` for the other populations.
  

::: {.callout-warning}
The SID population (from Sidi-Meskour) is referred as belonging to the CLONAPIN dataset in the file `coordinates_pinaster_populations_ade_phd.csv` but was not included in the populations I used during my PhD (populations in the file `coordinates_pinaster_populations_juliette_phd.csv`). So we attribute to this population the coordinates from the file `coordinates_pinaster_populations_ade_phd.csv`.
:::

```{r MergingWithMyPopulationCoordinates}
pop_coord <- pop_coord %>% 
  left_join(clonapin_pop_coord_juliette %>% dplyr::select(code, contains("juliette")), by="code") %>% 
  mutate(latitude = ifelse(dataset == "CLONAPIN" & !is.na(latitude_juliette), latitude_juliette,latitude),
         longitude = ifelse(dataset == "CLONAPIN" & !is.na(longitude_juliette), longitude_juliette, longitude)) %>% 
  dplyr::select(-longitude_juliette, -latitude_juliette)
```

In this dataset, the coordinates of some populations were not ok (eg the coordinates of the RIO population fall into the Mediterranean sea). Santiago C. González-Martínez sent a new dataset (`coordinates_pinaster_populations_21022023.txt`) with updated coordinates (21/02/2023) and with elevation information (with some missing data for some populations).


```{r NewAllPopsCoordinates}
new_pop_coord <-read.delim(here("data/PopulationData/coordinates_pinaster_populations_21022023.txt")) %>% 
  dplyr::rename(code = CODE, 
                dataset = Data_set,
                latitude_new = Latitude, 
                longitude_new = Longitude,
                altitude_new = Elevation,
                country= Country)


pop_coord <- pop_coord %>% 
  left_join(new_pop_coord, by = c("dataset", "code")) %>% 
  mutate(latitude_diff = latitude - latitude_new,
         longitude_diff = longitude - longitude_new,
         altitude_diff = altitude_juliette - altitude_new)
```

Which populations have new coordinates?

```{r PopWithDifferentCoordinates}
pop_coord %>% filter(latitude_diff != 0 | longitude_diff != 0) %>% 
  dplyr::select(-contains("altitude")) %>% 
  kable_mydf()
```

How many NAs in each column?

```{r ChekingsNbNAs}
pop_coord %>% 
  dplyr::summarise(across(everything(), ~ sum(is.na(.)))) %>% 
  pivot_longer(everything(), names_to = "Variable", values_to = "Number of NAs") %>% 
  kable_mydf() 
```

Looking at altitude differences for the CLONAPIN populations 

```{r AltitudeDifferences}
pop_coord %>% 
  dplyr::select(dataset,code,contains("altitude")) %>% 
  dplyr::filter(dataset=="CLONAPIN") %>% 
  kable_mydf()
```

We keep the new altitude information (those from the file `coordinates_pinaster_populations_21022023.txt`)

```{r KeepingNewAltitudes}
pop_coord <- pop_coord %>% 
  mutate(latitude = latitude_new,
         longitude = longitude_new,
         altitude = case_when(dataset != "CLONAPIN" ~ as.numeric(altitude_new),
                              dataset == "CLONAPIN" & is.na(altitude_new) ~ altitude_juliette, # for the ROD population
                              dataset == "CLONAPIN" & !is.na(altitude_new) ~ as.numeric(altitude_new))) %>% 
  dplyr::select(-contains("ude_"))
```

`r pop_coord %>% summarise(sum(is.na(altitude))) %>% pull()` have missing data for altitude.

```{r MissingDataForAltitude}
pop_coord %>%
  dplyr::filter(is.na(altitude)) %>% 
  dplyr::select(-altitude,-POP) %>% 
  kable_mydf()
```

We attribute to these populations the same elevation data as the one of the DEM used by ClimateDT (i.e. Google maps DEM).

```{r AttributeDEEMelevationDataToPopulationsWithMissingDataForAltitude}
pop_coord <- pop_coord %>% 
  mutate(altitude = case_when(code == "CAV" ~ 1259,
                              code == "FPN" ~ 792,
                              code == "TAB" ~ 76,
                              code == "TUS" ~ 84,
                              code == "VCA" ~ 396,
                              code == "ES_PP_58/MAE" ~ 1353,
                              code == "ES_PP_59" ~ 1007,
                              code == "ES_PP_60" ~ 1136,
                              code == "MAUbis/FR-PP-12" ~ 606,
                              TRUE ~ altitude))
```


We visualize and save the dataset. Sent to Santiago C. González-Martínez and Adélaïde Theraroz the 22/02/2023. 

```{r VizAndSavingAllPopsInfo}
pop_coord %>% 
  dplyr::select(-POP) %>% 
  write_csv(here("data/PopulationData/population_information_pinaster_feb2023.csv"))


pop_coord %>% 
  dplyr::select(-POP) %>% 
  kable_mydf()
```


# Climatic data

## Preparing a file for the extraction

We generate a `csv` file for the extraction with ClimateDT. The format of the input file has to be:

  - `1st Column` **ID** (alphanumeric) unique ID of the location (either a number or a code).

  - `2nd Column` **Latitude** (float) latitude of the location expressed in decimal degrees (dot as decimal separator).

  - `3rd Column` **Longitude** (float) longitude of the location expressed in decimal degrees (dot as decimal separator).

  - `4th Column` **Elevation** (integer) elevation of the location expressed in meters a.s.l.


```{r CsvFileForClimaticExtraction}
# csv file sent to Maurizio Marchi the 22/02/2023
# -----------------------------------------------
pop_coord %>% 
  dplyr::select(code,latitude,longitude,altitude) %>% # rm the column dataset
  write_csv(here("data/ClimaticData/MaritimePinePops/ClimateDTfiles/Preextraction/PopCoordinates_ClimateDT_PreExtractionTab.csv"))
```



## Generating datasets with climatic information

The aim of this section is to generate datasets with averages of the climatic variables over a certain time periods (i.e., 1901-1950, 1961-1990 or 2041-2070).

### Point estimates

We load the csv files sent by Maurizio Marchi with **point estimate** climatic values at the location of the populations.

We generate some datasets with climatic information for the variables of interest and only for the CLONAPIN populations. 


#### Average climate over reference period 


**Elevation correction**. Maurizio Marchi sent climatic files adjusted or not for elevation. We show in the report `3_CheckingPastFutureClimatesPopulationLocations.qmd` that climatic values adjusted or not for elevation are similar for the climatic variables of interest in our study. In the paper analyses, we will use the climatic values not adjusted for elevation.

**Reference period**. In the paper analyses, we will use the averages of the climatic variables over the reference period 1901-1950. See report `3_CheckingPastFutureClimatesPopulationLocations.qmd` for a comparison of the climatic averages over the reference period 1901-1950 vs 1961-1990.

**In this section**, we calculate the average of the climatic variables for the two reference periods 1901-1950 and 1961-1990 and for data adjusted or not for elevation. We generate two .rds files: one for the climatic data adjusted for elevation, and one for the climatic data not adjusted for elevation. In each file, we store a list with each element corresponding to a reference period (i.e. 1901-1950 and 1961-1990). And for each reference period, we generate a dataset with the climatic variables in columns averaged over the period considered. 

::: {.callout-warning}
In this dataset, the indices such as `bio1`, `bio2`, `AHM`, `SHM` etc are re-calculated using the annual `tmn`, `tmx` and `prc` values averaged over the period considered (i.e., these indices are not calculated by averaging their annual values over the period considered). These climatic indices are calculated based on the `biovars` function of the dismo R package: <https://rdrr.io/cran/dismo/src/R/biovars.R>
:::

::: {.callout-note}
##### DRYAD repository

We export in the DRYAD repository only the data that we then use in the paper analyses: climatic values not adjusted for elevation and averaged over the reference period 1901-1950. We export two datasets: `AnnualClimaticData_FromClimateDT_PopulationLocations.csv` with the annual climatic data between 1901 and 2021 (i.e., the raw climatic data from ClimateDT), and `AveragedClimaticVariables_ReferencePeriod_PopulationLocations.csv` with the averages of the climatic variables over the reference period 1901-1950.

Note that we left in the dataset `AnnualClimaticData_FromClimateDT_PopulationLocations.csv` all climate variables except those whose full names and other information are not available on the ClimateDT website, i.e., the climate variables `MOP` and `AOP`.
Note that we did not calculate the average over the reference periods for all the climatic variables available in ClimateDT, so the `AveragedClimaticVariables_ReferencePeriod_PopulationLocations.csv` file contains a subset of the climatic variables available in ClimateDT.
:::


```{r FunctionCalcAvgClimVar}
# Function to calculate the average of the climatic variables at the location of the populations
# Function based on the biovars function of the dismo R package
source(here("scripts/functions/calc_avg_clim_var.R"))
```



```{r AveragingClimaticDataOverReferencePeriods, results="hide"}
# Extracting CLONAPIN population names
clonapin_name_pops <- pop_coord %>% 
  dplyr::filter(dataset=="CLONAPIN") %>% 
  dplyr::filter(!code %in% c("ROD","SID")) %>% # no genomic data for these two populations
  pull(code)


# Specify the reference periods for whichc are will calculate the mean climates
list_ref_periods <- list(ref_1901_1950 =  c(1901,1950),
                         ref_1961_1990 = c(1961,1990))
  

# we generate two files with climatic data adjusted (or not) for elevation
lapply(list("ADJ","noADJ"), function(adj){

  
# A first filtering: keeping only CLONAPIN populations, removing monthly climatic variables
  
clim <- read_csv(here(paste0("data/ClimaticData/MaritimePinePops/ClimateDTfiles/Extraction/ClimateDT_cmip6_GFDL-ESM4_POPcoordinates_",adj,".csv")), show_col_types = FALSE) %>% 
  dplyr::rename(longitude=Longitude,
                latitude=Latitude,
                elevation=Elevation,
                year=Year,
                pop=ID,
                SP=MSP) %>% # replace mean summer precipitation by summer precipitation
  dplyr::filter(pop %in% clonapin_name_pops) %>% # we keep only CLONAPIN pops
  dplyr::mutate(pop= ifelse(pop=="VAL-VMQ", "VAL",pop)) %>%  # the VAL-VMQ population is referred as VAL in the present study
  dplyr::filter(year %in% 1901:2021) %>% 
  dplyr::select(-MOP, -AOP)

# We save the annual climatic data for the DRYAD repository (climatic data not adjusted for elevation)
if(adj=="noADJ"){clim %>% write_csv(here("data/DryadRepo/AnnualClimaticData_FromClimateDT_PopulationLocations.csv"))}

# we create a list with each element corresponding to a reference period
lapply(list_ref_periods, function(ref_period){
  
ref_means <- calc_avg_clim_var(ref_period = ref_period, clim_df = clim)

range <- c(ref_period[[1]],ref_period[[2]])

return(list(range = range,
            ref_means = ref_means))
})  %>% 
saveRDS(here(paste0("data/ClimaticData/MaritimePinePops/ClimatePopulationLocationPointEstimates_ReferencePeriods_",adj,".rds")))
  
})
```

Below are the first 40 rows of the dataset `AnnualClimaticData_FromClimateDT_PopulationLocations.csv`.

```{r ShowAnnualClimaticDataset, message=F}
read_csv(here("data/DryadRepo/AnnualClimaticData_FromClimateDT_PopulationLocations.csv")) %>% 
  .[1:50,] %>%  
  kable_mydf()
```

We export in the DRYAD repository the averages of the climatic variables over the reference period 1901-1950 (dataset `AveragedClimaticVariables_ReferencePeriod_PopulationLocations.csv`) and we show this dataset below.

```{r ExportAveragedClimaticVariablesDatasetReferencePeriodPopulationLocations}
clim <- readRDS(here("data/ClimaticData/MaritimePinePops/ClimatePopulationLocationPointEstimates_ReferencePeriods_noADJ.rds"))[["ref_1901_1950"]]$ref_means

clim %>% write_csv(here("data/DryadRepo/AveragedClimaticVariables_ReferencePeriod_PopulationLocations.csv"))

clim %>% kable_mydf()
```


#### Future climates 


Using point estimate climatic data, we generate a dataset with the predicted average climatic variables over the period 2041-2070 with the GCM CMIP6 GFDL-ESM4 and under the scenario SSP3.7-0. This dataset is used in the report `3_CheckingPastFutureClimatesPopulationLocations.qmd` to check its similarity with the averaged climatic variables extracted from rasters (see next section); but this dataset is not used in the following analyses. So we do not export this dataset in the DRYAD repository.


```{r PredictionsFutureClimates}
# Predictions of future climates for the period 2041-2070 with the GCM CMIP6 GFDL-ESM4 and scenario  SSP3.7-0
# -----------------------------------------------------------------------------------------------------------

lapply(list("ADJ","noADJ"), function(adj){
  
clim <- read_csv(here(paste0("data/ClimaticData/MaritimePinePops/ClimateDTfiles/Extraction/ClimateDT_cmip6_GFDL-ESM4_POPcoordinates_",adj,".csv")), 
           show_col_types = FALSE) %>% 
  dplyr::rename(longitude=Longitude,
                latitude=Latitude,
                elevation=Elevation,
                pop=ID,
                year=Year,
                SP=MSP) %>% # replace mean summer precipitation by summer precipitation
  dplyr::filter(pop %in% clonapin_name_pops) %>% # we keep only CLONAPIN pops
  dplyr::mutate(pop= ifelse(pop=="VAL-VMQ", "VAL",pop)) # the VAL-VMQ population is referred as VAL in the present study

calc_avg_clim_var(ref_period = c(2041,2070), clim_df = clim, id_spatial_points = "pop")

  }) %>% 
  setNames(c("ADJ","noADJ")) %>% 
  saveRDS(here::here("data/ClimaticData/MaritimePinePops/ClimatePopulationLocationsPointEstimates_GFDL-ESM4_SSP370_2041-2070.rds"))
```


### Raster-extracted values

We extract the values of the climatic variables from rasters which contain the predicted average of the climatic variables over the future period 2041-2070 from five different GCMs (namely GFDL-ESM4, IPSL-CM6A-LR, MPI-ESM1-2-HR, MRI-ESM2-0 and UKESM1-0-LL; one per raster) and under the shared-socio economic pathway SSP3.7-0.

```{r GenerateDatasetExtractedFutureClimaticValuesFromRasters}
# function to extract the climatic values from rasters
source(here("scripts/functions/extract_clim_from_rasters.R"))

# GCM names
gcm_names <- list.files(here("data/ClimaticData/ClimateDTRasters/")) %>%  str_sub(5,-35) %>% setdiff("")

# Climatic variables
clim_var <- readRDS(here("data/ClimaticData/MaritimePinePops/ClimatePopulationLocationPointEstimates_ReferencePeriods_ADJ.rds"))[[1]]$ref_means %>% 
  dplyr::select(-pop,-elevation,-contains("ude"),-contains("tmn"),-contains("tmx"),-contains("prc")) %>% 
  colnames()

# Population coordinates
pop_coord <- readRDS(here("data/ClimaticData/MaritimePinePops/ClimatePopulationLocationPointEstimates_ReferencePeriods_ADJ.rds"))[[1]]$ref_means %>% 
  dplyr::select(longitude,latitude) %>% 
  SpatialPoints(proj4string=CRS("+proj=longlat +datum=WGS84 +no_defs"))

# Population names
pop_names <- readRDS(here("data/ClimaticData/MaritimePinePops/ClimatePopulationLocationPointEstimates_ReferencePeriods_ADJ.rds"))[[1]]$ref_means %>% 
  pull(pop)


# List of dataframes (one for each GCM) with the climatic variables in columns
clim_df <- lapply(gcm_names, function(gcm){
  
lapply(clim_var, function(x) extract_clim_from_rasters(x=x, gcm=gcm, period="2041-2070", ssp="ssp370",pop_coord=pop_coord)) %>% 
  setNames(clim_var) %>% 
  as_tibble() %>% 
  mutate(pop=pop_names,
         gcm=gcm)

}) %>% setNames(gcm_names) 

clim_df %>% saveRDS(here("data/ClimaticData/MaritimePinePops/ClimatePopulationLocationValuesExtractedFromRasters_FiveGCMs_2041-2070_SSP370.rds"))

# Another option: one dataframe with the four columns: 
  # variable = climatic variable#
  # pop = population
  # gcm = Global Climatic Model (GCM)
  # mean_fut = value of the climatic variable
# clim_df <- lapply(clim_var, function(x){
#   
# lapply(gcm_names, function(gcm) extract_clim_from_rasters(x=x, gcm=gcm, period="2041-2070", ssp="ssp370",pop_coord=pop_coord)) %>% 
#   setNames(gcm_names) %>% 
#   as_tibble() %>% 
#   mutate(pop=pop_names)
# 
# }) %>% 
#   setNames(clim_var) %>% 
#   bind_rows(.id = "variable") %>% 
#   pivot_longer(names_to = "gcm",values_to="mean_fut",cols=all_of(gcm_names)) 

```

::: {.callout-note}
##### DRYAD repository

These climatic data will be used in the paper so we export the dataset in the DRYAD repository: file `AveragedClimaticVariables_FuturePeriod_PopulationLocations.csv`. 
:::

We show below the first 50 rows of the dataset.

```{r DryadRepoFutureClimates}
df <- readRDS(here("data/ClimaticData/MaritimePinePops/ClimatePopulationLocationValuesExtractedFromRasters_FiveGCMs_2041-2070_SSP370.rds")) %>% 
  bind_rows() %>%
  dplyr::select(pop,gcm,everything())


df %>% write_csv(here("data/DryadRepo/AveragedClimaticVariables_FuturePeriod_PopulationLocations.csv"))
  
df[1:50,] %>%  kable_mydf()
```

# Main gene pool of each population

We load the dataset containing the proportion of belonging of each genotype to a given gene pool [ancestry coefficients estimated in @jaramillo2015molecular with the STRUCTURE software].

We generate two datasets:

  - a dataset indicating the main gene pool of each clone (i.e., genotype)
  
  - a dataset indicating the main gene pool of each population.
  
We attribute different colors to each gene pool that we will use for the figures. 

```{r LoadMainGPClone}
# Incorporating gene pool information
# -----------------------------------
genotypes <- read_csv(here("data/DryadRepo/FormattedFilteredGenomicData_AlleleCounts_withmaf.csv"),show_col_types = FALSE) %>% 
  dplyr::select(-snp_ID) %>% 
  colnames() 
  
# we load the gene pool information with the ancestry coefficients for each clone
gps <- read_csv(here("data/DryadRepo/PopulationStructureCorrea2015.csv"), show_col_types = FALSE) %>% 
  dplyr::filter(clon %in% genotypes) %>% 
  dplyr::rename(main_gp_clon_code=max.Q,
                main_gp_clon=main_gp,
                color_main_gp_clon=color_main_gp)

gps_list <- gps %>% 
  group_by(pop) %>% 
  group_split() %>% 
  setNames(unique(gps$pop))
```

We identify the populations for which the main gene pool is not the same for all genotypes:

```{r IdentifyPopsWithDifferentMainGPclonLevel}
gps_list %>% 
  map_dfr(\(x) {
    data.frame(Populations = unique(x$pop),
               MainGenePoolNumber = x$main_gp_clon_code %>% unique() %>% length())
  }) %>% 
  group_by(MainGenePoolNumber) %>% 
  group_split()  %>% 
  map_dfr(\(x) {
    data.frame(Populations = paste0(x$Populations, collapse =", "),
               MainGenePoolNumber = unique(x$MainGenePoolNumber))
  }) %>% 
  kable_mydf(boldfirstcolumn = F)
```


The LEI and QUA populations have some clones that belong to different gene pools:

  - Most clones of the LEI population belong to the Central Spain gene pool, except four clones that mostly belong to the Iberian Atlantic gene pool.
  
  - Most clones of the QUA population mostly belong to the Central Spain gene pool, except two clones that mostly belong to the south-eastern Spain gene pool.
  
We have to account for these clones when we generate a dataset with the main gene pool of each population.

```{r VizAdmixtureLEIandQUApopulations}
gps_list[["LEI"]] %>% kable_mydf(boldfirstcolumn = F)
gps_list[["QUA"]] %>% kable_mydf(boldfirstcolumn = F)
```

We show below the dataset with the main gene pool of each population. 

```{r ExtractMainGPpoplevel}
# Extracting the main gene pool of each population
gp_poplevel <- gps_list %>% 
  modify(\(x) mutate(x, main_gp_pop= x$main_gp_clon  %>% table() %>% which.max() %>% names())) %>% 
  list_rbind() %>% 
  dplyr::select(pop, main_gp_pop) %>% 
  distinct()
  
# Information of the main gene pool for each pop
gp_poplevel <- gps %>% 
  dplyr::select(main_gp_clon,color_main_gp_clon) %>% 
  distinct() %>% 
  dplyr::rename(main_gp_pop=main_gp_clon,
                color_main_gp_pop=color_main_gp_clon) %>% 
  right_join(gp_poplevel,by="main_gp_pop") 

gp_poplevel %>%  kable_mydf()
```

First 30 rows of the dataset with the main gene pool of each clone (i.e., genotype).

```{r ExtractMainGPclonlevel}
# Information of the main gene pool for each clone
gps <- gp_poplevel %>% 
  right_join(gps, by="pop") %>% 
  arrange(clon) # The clone order has to be the same as in the genomic data

gps[1:30,] %>%  kable_mydf()
```

We save the datasets.

```{r SaveGPDatasets}
list(pop_level=gp_poplevel,
     clon_level=gps) %>% 
saveRDS(here("data/GenomicData/MainGenePoolInformation.rds"))
```


# Session information

```{r SessionInfo}
devtools::session_info()
```
